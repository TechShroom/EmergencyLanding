buildscript {
    repositories {
        mavenCentral()
        maven {
            name "central snapshots"
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name "gradle plugins"
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
        maven {
            name = 'Maven Repository for JDT Compiler release'
            url = 'https://repo.eclipse.org/content/repositories/eclipse-staging/'
        }
        jcenter()
    }

    dependencies {
        classpath group: 'org.spongepowered', name: 'event-impl-gen', version: '1.1.0'
        classpath group: 'gradle.plugin.nl.javadude.gradle.plugins', name: 'license-gradle-plugin', version: '0.12.0'
        classpath group: 'com.techshroom', name: 'Aversion', version: '2.0.0-SNAPSHOT'
    }
}
apply plugin: 'aversion-apt'
apply plugin: 'aversion-maven'
apply plugin: 'aversion-util'
apply plugin: 'idea'

util {
    javaVersion = '1.8'
}
idea.project.languageLevel = util.javaVersion

mavencfg {
    description 'A game engine created for TechShroom Studios'
    coords 'TechShroom', 'EmergencyLanding'
}

apply plugin: 'com.github.hierynomus.license'

defaultTasks 'clean', 'licenseFormat', 'build'

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

repositories {
    mavenCentral()
    maven {
        name "central snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

ext.lwjglVersion = '3.0.0-SNAPSHOT'
dependencies {
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.0.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.0.2'
    compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '5.0.1'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.6.2'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    compile group: 'com.flowpowered', name: 'flow-math', version: '1.0.1'
    compile group: 'org.lwjgl', name: 'lwjgl', version: project.lwjglVersion
    compile group: 'org.lwjgl', name: 'lwjgl-platform', version: project.lwjglVersion, classifier: 'natives-osx'
    compile group: 'org.lwjgl', name: 'lwjgl-platform', version: project.lwjglVersion, classifier: 'natives-linux'
    compile group: 'org.lwjgl', name: 'lwjgl-platform', version: project.lwjglVersion, classifier: 'natives-windows'
    compile group: 'net.lingala.zip4j', name: 'zip4j', version: '1.3.2'
    compile group: 'io.netty', name: 'netty-all', version: '4.0.36.Final'
    compile group: 'com.apple', name: 'AppleJavaExtensions', version: '1.4'
    compile group: 'net.engio', name: 'mbassador', version: '1.2.4.2'
    compile group: 'org.l33tlabs.twl', name: 'pngdecoder', version: '1.0'
    compile group: 'com.squareup', name: 'javapoet', version: '1.6.1'
    addAPTReqWComp group: 'com.google.guava', name: 'guava', version: '19.0'
    addAPT group: 'com.google.auto.factory', name: 'auto-factory', version: '1.0-SNAPSHOT'
    addAPT group: 'com.google.auto.service', name: 'auto-service', version: '1.0-SNAPSHOT'
    addAPT group: 'com.google.auto.value', name: 'auto-value', version: '1.3-SNAPSHOT'
    addAPTReq name: 'aopalliance'
    addAPTReq name: 'asm'
    addAPTReq name: 'auto-value'
    addAPTReq name: 'auto-common'
    addAPTReq name: 'cglib'
    addAPTReq name: 'commons-collections'
    addAPTReq name: 'commons-lang'
    addAPTReq name: 'dagger'
    addAPTReq name: 'javawriter'
    addAPTReq name: 'javax.inject'
    addAPTReq name: 'velocity'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// Schweet?
apply plugin: 'event-impl-gen'

// Compile time code generator for the event factory
ext.eventBasePackage = 'src/main/java/com/techshroom/emergencylanding/library/eventful'
genEventImpl {
    includeSrc = [
        "${project.eventBasePackage}/"
    ]
    excludeSrc = []
    outputDir = 'src/main/java/'
    outputFactory = 'com.techshroom.emergencylanding.library.eventful.EmergencyLandingEventFactory'
    eventImplCreateMethod = 'ocom.techshroom.emergencylanding.library.eventful.EmergencyLandingEventFactoryUtils.createEventImpl'
    sortPriorityPrefix = 'original'
    groupingPrefixes = ['from': 'to']
    validateCode = false
}

sourceSets.main {
    java.srcDir 'src/generated/java'
    resources.srcDir 'src/generated/resources'
}

configure([compileJava, compileTestJava]) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path']
    options.deprecation = true
    options.encoding = 'UTF-8'
    options.incremental = true
    options.fork = true
}

license {
    ext {
        name = project.name
        organization = project.organization
        url = project.url
    }
    header = rootProject.file('HEADER.txt')
    ignoreFailures = false
    strictCheck = true
    include '**/*.java'
    exclude '**/Color.java'
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

task detokenizeSource(type: Copy) {
    from 'src/main/java'
    into 'build/detokenizedSource'
    inputs.property 'version', project.version.toString()
    filter(ReplaceTokens, tokens: [
        'NAME': project.name.toString(),
        'VERSION': project.version.toString()
    ])
}

compileJava.dependsOn(detokenizeSource)
compileJava.source = fileTree(dir: 'build/detokenizedSource')
